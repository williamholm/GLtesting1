#version 330 core


/////////////////////////////////////////////

struct Material
{
	float shininess;
};

struct PointLight {    
    vec3 position; 
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};  

struct DirLight{
    vec3 direction;
  
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
};

#define NR_POINT_LIGHTS 10  

uniform PointLight pointLights[NR_POINT_LIGHTS];
uniform DirLight dirLight;
uniform sampler2D texture_diffuse1;
uniform sampler2D texture_specular1;
uniform Material material;
uniform vec3 viewPos;

in vec2 TexCoords;
in vec3 FragPos;
in vec3 Normal;

out vec4 color;

vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir);
vec3 calcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir);  
  
void main()
{
  // define an output color value
  vec3 outp;
  vec3 norm = normalize(Normal);
  vec3 viewDir = normalize(viewPos - FragPos);

  // add the directional light's contribution to the output
  outp = outp + calcDirLight(dirLight, norm, viewDir);

  // Do the same for all point lights
  for(int i = 0; i < NR_POINT_LIGHTS; i++)
  	outp = outp + calcPointLight(pointLights[i], norm, FragPos, viewDir);

  
  color = vec4(outp, 1.0);
}  

vec3 calcDirLight(DirLight light, vec3 normal, vec3 viewDir)
{
    vec3 lightDir = normalize(-light.direction);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // Combine results
    vec3 ambient  = light.ambient  * vec3(texture(texture_diffuse1, TexCoords));			
    vec3 diffuse  = light.diffuse  * diff * vec3(texture(texture_diffuse1, TexCoords));	
    vec3 specular = light.specular * spec * vec3(texture(texture_specular1, TexCoords));	
    return (ambient + diffuse + specular);
}  

// Calculates the color when using a point light.
vec3 calcPointLight(PointLight light, vec3 normal, vec3 fragPos, vec3 viewDir)
{
    vec3 lightDir = normalize(light.position - fragPos);
    // Diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // Specular shading
    vec3 reflectDir = reflect(-lightDir, normal); 
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess); 
    // Attenuation
    float distance    = length(light.position - fragPos); //should be ok
    float attenuation = 1.0f / (1 + (0.09 * distance) + 0.032 * (distance * distance));    
    // Combine results
    vec3 ambient  = attenuation * light.ambient  * vec3(texture(texture_diffuse1, TexCoords));
    vec3 diffuse  = attenuation * light.diffuse  * diff * vec3(texture(texture_diffuse1, TexCoords));
    vec3 specular = attenuation * light.specular * spec * vec3(texture(texture_specular1, TexCoords));
    return (ambient + diffuse + specular);
} 